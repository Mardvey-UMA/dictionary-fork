import { useCreateCourse } from '@/hooks/api/course.hooks'
import type { CourseRequestDTO } from '@/shared/types/course'
import { UploadOutlined } from '@ant-design/icons' // –Ω—É–∂–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ Upload
import { Button, Form, Input, Modal, notification, Upload } from 'antd'
import type { UploadFile } from 'antd/es/upload' // —Ç–∏–ø –¥–ª—è —Ñ–∞–π–ª–∞
import { useNavigate } from 'react-router-dom'

type Props = {
	open: boolean
	onClose: () => void
}
type CourseFormValues = {
	title: string
	description?: string
	imageFile?: UploadFile[]
}
export const AddCourseModal = ({ open, onClose }: Props) => {
	const [form] = Form.useForm<CourseFormValues>()
	const navigate = useNavigate()
	const { mutate, isPending } = useCreateCourse()

	const handleOk = () => {
		form.validateFields().then(values => {
			const file =
				Array.isArray(values.imageFile) && values.imageFile.length > 0
					? values.imageFile[0].originFileObj
					: undefined

			const payload: CourseRequestDTO = {
				title: values.title,
				description: values.description,
				imageFile: file,
			}

			mutate(payload, {
				onSuccess: course => {
					notification.success({ message: '–ö—É—Ä—Å —Å–æ–∑–¥–∞–Ω' })
					onClose()
					navigate(`/course/${course.id}`)
				},
			})
		})
	}

	return (
		<Modal
			title='–°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å'
			open={open}
			onOk={handleOk}
			onCancel={onClose}
			confirmLoading={isPending}
			okText='–°–æ–∑–¥–∞—Ç—å'
			cancelText='–û—Ç–º–µ–Ω–∞'
			destroyOnClose
		>
			<Form form={form} layout='vertical' preserve={false}>
				<Form.Item
					name='title'
					label='–ù–∞–∑–≤–∞–Ω–∏–µ'
					rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞' }]}
				>
					<Input />
				</Form.Item>

				<Form.Item name='description' label='–û–ø–∏—Å–∞–Ω–∏–µ'>
					<Input.TextArea rows={4} />
				</Form.Item>

				{/* üëá –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
				<Form.Item
					name='imageFile'
					label='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
					valuePropName='fileList'
					getValueFromEvent={e => (Array.isArray(e) ? e : e?.fileList)}
				>
					<Upload
						beforeUpload={() => false} // –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
						maxCount={1}
						accept='image/*'
					>
						<Button icon={<UploadOutlined />}>–ó–∞–≥—Ä—É–∑–∏—Ç—å</Button>
					</Upload>
				</Form.Item>
			</Form>
		</Modal>
	)
}
